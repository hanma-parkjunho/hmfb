-- Autogenerated: do not edit this file

CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID NUMBER(19,0)  NOT NULL PRIMARY KEY ,
	VERSION NUMBER(19,0) ,
	JOB_NAME VARCHAR2(100 char) NOT NULL,
	JOB_KEY VARCHAR2(32 char) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID NUMBER(19,0)  NOT NULL PRIMARY KEY ,
	VERSION NUMBER(19,0)  ,
	JOB_INSTANCE_ID NUMBER(19,0) NOT NULL,
	CREATE_TIME TIMESTAMP NOT NULL,
	START_TIME TIMESTAMP DEFAULT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	STATUS VARCHAR2(10 char) ,
	EXIT_CODE VARCHAR2(2500 char) ,
	EXIT_MESSAGE VARCHAR2(2500 char) ,
	LAST_UPDATED TIMESTAMP,
	JOB_CONFIGURATION_LOCATION VARCHAR(2500 char) NULL,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID NUMBER(19,0) NOT NULL ,
	TYPE_CD VARCHAR2(6 char) NOT NULL ,
	KEY_NAME VARCHAR2(100 char) NOT NULL ,
	STRING_VAL VARCHAR2(250 char) ,
	DATE_VAL TIMESTAMP DEFAULT NULL ,
	LONG_VAL NUMBER(19,0) ,
	DOUBLE_VAL NUMBER ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID NUMBER(19,0)  NOT NULL PRIMARY KEY ,
	VERSION NUMBER(19,0) NOT NULL,
	STEP_NAME VARCHAR2(100 char) NOT NULL,
	JOB_EXECUTION_ID NUMBER(19,0) NOT NULL,
	START_TIME TIMESTAMP NOT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	STATUS VARCHAR2(10 char) ,
	COMMIT_COUNT NUMBER(19,0) ,
	READ_COUNT NUMBER(19,0) ,
	FILTER_COUNT NUMBER(19,0) ,
	WRITE_COUNT NUMBER(19,0) ,
	READ_SKIP_COUNT NUMBER(19,0) ,
	WRITE_SKIP_COUNT NUMBER(19,0) ,
	PROCESS_SKIP_COUNT NUMBER(19,0) ,
	ROLLBACK_COUNT NUMBER(19,0) ,
	EXIT_CODE VARCHAR2(2500 char) ,
	EXIT_MESSAGE VARCHAR2(2500 char) ,
	LAST_UPDATED TIMESTAMP,
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR2(2500 char) NOT NULL,
	SERIALIZED_CONTEXT CLOB ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR2(2500 char) NOT NULL,
	SERIALIZED_CONTEXT CLOB ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ START WITH 0 MINVALUE 0 MAXVALUE 9223372036854775807 NOCYCLE;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ START WITH 0 MINVALUE 0 MAXVALUE 9223372036854775807 NOCYCLE;
CREATE SEQUENCE BATCH_JOB_SEQ START WITH 0 MINVALUE 0 MAXVALUE 9223372036854775807 NOCYCLE;

/*********************************************************************
	UNC BATCH 테이블 추가
 *********************************************************************
CREATE TABLE BATCH_BASIC  (
	JOB_ID CHAR(10) NOT NULL PRIMARY KEY ,
	JOB_NAME VARCHAR2(50) NOT NULL,
	DESCRIPTION VARCHAR2(100),
	CLASS_NAME VARCHAR2(100),
	BATCH_TYPE CHAR(1),			-- C(chunk), T(tasklet)
	RERUN_YN CHAR(1),			-- 재작업가능여부 
	INPUT_DATA_ID VARCHAR2(100),		-- 작업입력데이터 아이디(파일경로 또는 sqlId)
	OUTPUT_DATA_ID VARCHAR2(100),		-- 작업출력데이터 아이디 
	CYCLE_CD CHAR(1), 			-- D,M,Q,Y,A(ANY)
	DIST_METHOD CHAR(1),		-- R(roundrobin), D(dedicated)
	DEDICATE_SERVER_ID VARCHAR2(10),	
	COMMIT_COUNT NUMBER(4),
	THEAD_COUNT NUMBER(1)
);

CREATE TABLE BATCH_EXECUTION  (
	JOB_ID CHAR(10) 			NOT NULL,
	EXECUTION_ID CHAR(36)  		NOT NULL,
	VERSION NUMBER(3) 			NOT NULL,
	JOB_DATE CHAR(8)			NOT NULL,
	RUN_PARAM VARCHAR2(100),
	START_TIME TIMESTAMP NOT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	BATCH_JOB_STATUS CHAR(1),
	EXE_SERVER_ID VARCHAR2(10),	
	JOB_NAME VARCHAR2(50) NOT NULL,
	DESCRIPTION VARCHAR2(100),
	CLASS_NAME VARCHAR2(100),
	BATCH_TYPE CHAR(1),					-- C(chunk), T(tasklet)
	INPUT_DATA_ID VARCHAR2(100),		-- 작업입력데이터 아이디(파일경로 또는 sqlId)
	OUTPUT_DATA_ID VARCHAR2(100),		-- 작업출력데이터 아이디 
	CYCLE_CD CHAR(1), 			-- D,M,Q,Y,A(ANY)
	DIST_METHOD CHAR(1),		-- R(roundrobin), D(dedicated)
	COMMIT_COUNT NUMBER(4),
	-- 재작업때마다 행을 insert ? 하는 것으로 하면  작업 횟수는 제거. 실행결과 - 재작업결과 를 master-detail 로 설계? 
	RUN_COUNT NUMBER(3),		-- 작업횟수(재작업을 고려)
	PROCESS_INDEX NUMBER(10),	-- 처리완료위치(재작업을 고려)
	
	COMMIT_COUNT NUMBER(19,0) ,
	READ_COUNT NUMBER(19,0) ,
	FILTER_COUNT NUMBER(19,0) ,
	WRITE_COUNT NUMBER(19,0) ,
	READ_SKIP_COUNT NUMBER(19,0) ,
	WRITE_SKIP_COUNT NUMBER(19,0) ,
	PROCESS_SKIP_COUNT NUMBER(19,0) ,
	ROLLBACK_COUNT NUMBER(19,0) ,
	EXIT_CODE VARCHAR2(2500 char) ,
	EXIT_MESSAGE VARCHAR2(2500 char) 
) ;
 *********************************************************************/